/**
 * This file provided by Facebook is for non-commercial testing and evaluation
 * purposes only. Facebook reserves all rights not expressly granted.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 * FACEBOOK BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */


function addZero(i) {
    if (i < 10) {
        i = "0" + i;
    }
    return i;
}
var Comment = React.createClass({
	rawMarkup: function() {
		var rawMarkup = marked(this.props.children.toString(), {sanitize: true});
		return { __html: rawMarkup };
	},
	
	render: function() {
		var date = new Date(0); // The 0 there is the key, which sets the date to the epoch
		date.setUTCSeconds(parseInt(this.props.id)/1000);
		var hh = date.getHours();
		var dd = "AM";
		var h=hh;
		if (h >= 12) {
			h = hh-12;
			dd = "PM";
		}
		h = addZero(h);
		var m = addZero(date.getMinutes());
		var s = addZero(date.getSeconds());
		var timeString = h + ":" + m + ":" + s + " " +  dd;
		
		return (
			<tr className="comment">
				<td className="commentTimeStamp">
					<span>
						{timeString}
					</span>
				</td>
				<td className="commentAuthor">
					<span>
						{this.props.author}
					</span>
				</td>
				<td className="commentText">
					<span dangerouslySetInnerHTML={this.rawMarkup()} />
				</td>
			</tr>
		);
	}
});
var CommentBox = React.createClass({
  loadCommentsFromServer: function() {
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      cache: false,
      success: function(data) {
        this.setState({data: data});
      }.bind(this),
      error: function(xhr, status, err) {
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  handleCommentSubmit: function(comment) {
    var comments = this.state.data;
    // Optimistically set an id on the new comment. It will be replaced by an
    // id generated by the server. In a production application you would likely
    // not use Date.now() for this and would have a more robust system in place.
    comment.id = Date.now();
    var newComments = comments.concat([comment]);
    this.setState({data: newComments});
	
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      type: 'POST',
      data: comment,
      success: function(data) {
        this.setState({data: data});
      }.bind(this),
      error: function(xhr, status, err) {
        this.setState({data: comments});
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  getInitialState: function() {
    return {data: []};
  },
  componentDidMount: function() {
    this.loadCommentsFromServer();
    setInterval(this.loadCommentsFromServer, this.props.pollInterval);
  },
  render: function() {
    return (
      <div className="commentBox">
        <CommentList data={this.state.data} />
        <CommentForm onCommentSubmit={this.handleCommentSubmit} />
      </div>
    );
  }
});

var CommentList = React.createClass({
  render: function() {
    var commentNodes = this.props.data.map(function(comment) {
      return (
        <Comment author={comment.author} key={comment.id} id={comment.id}>
          {comment.text}
        </Comment>
      );
    });
    return (
      <div className="commentList">
        {commentNodes}
      </div>
    );
  }
});

var CommentForm = React.createClass({
  getInitialState: function() {
    return {author: ''};
  },
  handleAuthorChange: function(e) {
    this.setState({author: e.target.value});
  },
  handleTextChange: function(e) {
    this.setState({text: e.target.value});
  },
  handleSubmit: function(e) {
    e.preventDefault();
    var author = this.state.author.trim();
    var text = this.state.text.trim();
    if (!text || !author) {
      return;
    }
    this.props.onCommentSubmit({author: author, text: text});
	
    this.setState({text: ''});
  },
  render: function() {
    return (
      <form className="commentForm" onSubmit={this.handleSubmit}>
        <input
		  id="inputName"
          type="text"
		  maxLength="16"
          placeholder="Your name"
          value={this.state.author}
          onChange={this.handleAuthorChange}
        />
        <input
		  id="inputText"
          type="text"
		  maxLength="200"
          placeholder="Say something..."
          value={this.state.text}
          onChange={this.handleTextChange}
        />
        <input type="submit" value="Post"/>
      </form>
    );
  }
});

ReactDOM.render(
	<CommentBox url="/api/comments" pollInterval={200} />,
	document.getElementById('chatBox')
);

function update(){
	
	$( ".commentAuthor:not(.clickable)" ).click(function() {
		$("#inputText").val("test");
	});
	$(".commentAuthor").addClass('clickable');
}
function doScroll()
{
	var ChatWindow=$(".commentList");
	ChatWindow.scrollTop(ChatWindow[0].scrollHeight);
	console.log('scrolled');
	
}
var myObserver = new MutationObserver(mutationHandler);
//--- Add a target node to the observer. Can only add one node at a time.
// XXX Shou: we should only need to watch childList, more can slow it down.
$(".commentList").each(function() {
	myObserver.observe(this, { childList: true });
});

function mutationHandler(mutationRecords) {
	mutationRecords.forEach(function(mutation) {
		var jq = $(mutation.addedNodes);
		// There are nodes added
		if (jq.length > 0) {

			// cool we have a message.

			var $user = $(jq[0]).find('.commentAuthor');
			if(! $user.length) {
				$user = $(jq[0]).find('.commentAuthor');
			}
			var thisUser = $user.text();
			var $message = $(jq[0]).find('.commentText');
			var messageText = $message.text();
			doScroll();
		}
	});
	console.log('test');
}
setInterval(update,200);